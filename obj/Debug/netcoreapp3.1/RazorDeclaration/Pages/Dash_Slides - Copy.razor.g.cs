// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SQL_Connection.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using SQL_Connection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "H:\Sutay_cutlist\Sql-connection\_Imports.razor"
using SQL_Connection.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using SQL_Connection.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/dash")]
    public partial class Dash_Slides___Copy : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 33 "H:\Sutay_cutlist\Sql-connection\Pages\Dash_Slides - Copy.razor"
           
        #region Bar Chart
        class DataItem //This class is the default example for a bar graph.
        {
            public string Quarter { get; set; }
            public double Revenue { get; set; }
        }

        List<Sales> sales = new List<Sales>();
        Sales sale = new Sales();
        DataItem[] salesCount = new DataItem[] { };
        string Message = "";

        string FormatNormally(object value)  // idk why radzen demands a formatter, this just turns an int into a string
        {
            return ((double)value).ToString();
        }

        protected override async Task OnInitializedAsync()
        {
            GetSales();
            CountQuarters();
        }

        private void GetSales()
        {
            sales = salesService.GetSales();
        }

        private void CountQuarters()
        {
            Dictionary<String, int> quarterData = new Dictionary<string, int>();
            String thisQuarter;

            foreach (Sales sale in sales)
            {
                thisQuarter = sale.Year.ToString() + " Q" + GetQuarter(sale.Month).ToString();
                if (quarterData.ContainsKey(thisQuarter))
                {
                    quarterData[thisQuarter] += 1;
                }
                else
                {
                    quarterData[thisQuarter] = 1;
                }
            }


            salesCount = new DataItem[quarterData.Count];
            int count = 0;
            String[] sortedQuarters = quarterData.Keys.ToArray();
            Array.Sort(sortedQuarters);

            foreach (String Key in sortedQuarters)
            {
                salesCount[count] = new DataItem
                {
                    Quarter = Key,
                    Revenue = quarterData[Key]
                };
                count += 1;
            }


        }

        public static int GetQuarter(String month)
        {
            switch (month)
            {
                case "January":
                case "February":
                case "March":
                    return 1;
                case "April":
                case "May":
                case "June":
                    return 2;
                case "July":
                case "August":
                case "September":
                    return 3;
                case "October":
                case "November":
                case "December":
                    return 4;
                default:
                    return 0;
            }
        }
        #endregion

        #region Birthdays

        String birthdayListFile = "Data/birthday_list.json";

        /*
        This function gets a number of birthdays equal to count
        It will return them preformatted as "name: date"
        */
        List<String> getBirthdays(int count)
        {
            Dictionary<String, DateTime> birthday_dict = readBirthdays();
            List<String> all_birthdays = birthday_dict.Keys.ToList();
            all_birthdays.Sort((a, b) => ((birthday_dict[a] - DateTime.Today).Days - (birthday_dict[b] - DateTime.Today).Days));
            // after sorting all_birthdays, the nest step is to add the dates to it so the list is useable
            all_birthdays = (from name in all_birthdays select name + ": " + birthday_dict[name].Month.ToString() + "/" + birthday_dict[name].Day.ToString()).ToList();

            if (all_birthdays.Count < count) { count = all_birthdays.Count; } //if you ask for more birthdays than we have, just give them all of them

            List<string> birthdays = all_birthdays.Take(count).ToList();

            return birthdays;
        }



        /*
        This function reads the excel file birthdayListFile and create a dictionary of names to DateTime objects
        For simplicity off comparisons late, the DateTime objects will represent the person's next birthday this year
        */
        Dictionary<String, DateTime> readBirthdays()
        {
            Dictionary<String, DateTime> birthdays = new Dictionary<String, DateTime>();
            DateTime today = DateTime.Today;

            // read in the file
            Dictionary<String, List<int>> items;
            using (StreamReader r = new StreamReader(birthdayListFile))
            {
                string json = r.ReadToEnd();
                items = JsonConvert.DeserializeObject<Dictionary<String, List<int>>>(json); // The json should be {"Person name":[month, day],}
            }

            foreach (String name in items.Keys)
            {
                DateTime date = new DateTime(today.Year, items[name][0], items[name][1]);
                if (date < today) { date = date.AddYears(1); }
                birthdays[name] = date;
            }

            return birthdays;
        }

        #endregion

        #region Announcements

        #endregion
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SQL_Connection.IServices.ISalesService salesService { get; set; }
    }
}
#pragma warning restore 1591
