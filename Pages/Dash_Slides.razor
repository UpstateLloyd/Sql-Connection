@page "/dash"
@using SQL_Connection.Data;
@using System.Globalization;
@using System.IO;
@using Radzen;
@using Radzen.Blazor;
@using Newtonsoft.Json;
@inject SQL_Connection.IServices.ISalesService salesService;
<h3>Number of sales by quarter</h3> <!-- Bar chart -->
<div class="row">
    <div class="col-md-6 col-sm-12 p-4">
        <RadzenChart>
            <RadzenBarSeries Data="@salesCount" CategoryProperty="Quarter" ValueProperty="Revenue" />
            <RadzenValueAxis Formatter="@FormatNormally">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Number of orders" />
            </RadzenValueAxis>
            <RadzenBarOptions Radius="5" />
        </RadzenChart>
    </div>
</div>

<h3>Upcoming birthdays:</h3>   <!-- Birthdays -->
<div class="row">
    <ul>
        @*@foreach (String birthday in getBirthdays(5))
        {
            <li>@birthday</li>
        }*@
    </ul>
</div>

<h3>Announcements:</h3>   <!-- Announcements -->
<div class="row">
    <ul>
        @foreach (String filename in announceFiles())
        {
            <img src=@("AnnouncementSlides/" + filename) width="300px" />
        }
    </ul>
</div>

@code {
        #region Bar Chart
    class DataItem //This class is the default example for a bar graph.
    {
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }

    List<Sales> sales = new List<Sales>();
    Sales sale = new Sales();
    DataItem[] salesCount = new DataItem[] { };
    string Message = "";

    string FormatNormally(object value)  // idk why radzen demands a formatter, this just turns an int into a string
    {
        return ((double)value).ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        GetSales();
        CountQuarters();
    }

    private void GetSales()
    {
        sales = salesService.GetSales();
    }

    private void CountQuarters()
    {
        Dictionary<String, int> quarterData = new Dictionary<string, int>();
        String thisQuarter;

        foreach (Sales sale in sales)
        {
            thisQuarter = sale.Year.ToString() + " Q" + GetQuarter(sale.Month).ToString();
            if (quarterData.ContainsKey(thisQuarter))
            {
                quarterData[thisQuarter] += 1;
            }
            else
            {
                quarterData[thisQuarter] = 1;
            }
        }


        salesCount = new DataItem[quarterData.Count];
        int count = 0;
        String[] sortedQuarters = quarterData.Keys.ToArray();
        Array.Sort(sortedQuarters);

        foreach (String Key in sortedQuarters)
        {
            salesCount[count] = new DataItem
            {
                Quarter = Key,
                Revenue = quarterData[Key]
            };
            count += 1;
        }


    }

    public static int GetQuarter(String month)
    {
        switch (month)
        {
            case "January":
            case "February":
            case "March":
                return 1;
            case "April":
            case "May":
            case "June":
                return 2;
            case "July":
            case "August":
            case "September":
                return 3;
            case "October":
            case "November":
            case "December":
                return 4;
            default:
                return 0;
        }
    }
    #endregion

    #region Birthdays

    String birthdayListFile = "Data/birthday_list.json";

    /*
    This function gets a number of birthdays equal to count
    It will return them preformatted as "name: date"
    */
    //List<String> getBirthdays(int count)
    //{
    //    Dictionary<String, DateTime> birthday_dict = readBirthdays();
    //    List<String> all_birthdays = birthday_dict.Keys.ToList();
    //    all_birthdays.Sort((a, b) => ((birthday_dict[a] - DateTime.Today).Days - (birthday_dict[b] - DateTime.Today).Days));
    //    // after sorting all_birthdays, the nest step is to add the dates to it so the list is useable
    //    all_birthdays = (from name in all_birthdays select name + ": " + birthday_dict[name].Month.ToString() + "/" + birthday_dict[name].Day.ToString()).ToList();

    //    if (all_birthdays.Count < count) { count = all_birthdays.Count; } //if you ask for more birthdays than we have, just give them all of them

    //    List<string> birthdays = all_birthdays.Take(count).ToList();

    //    return birthdays;
    //}



    /*
    This function reads the excel file birthdayListFile and create a dictionary of names to DateTime objects
    For simplicity off comparisons late, the DateTime objects will represent the person's next birthday this year
    */
    Dictionary<String, DateTime> readBirthdays()
    {
        Dictionary<String, DateTime> birthdays = new Dictionary<String, DateTime>();
        DateTime today = DateTime.Today;

        // read in the file
        Dictionary<String, List<int>> items;
        using (StreamReader r = new StreamReader(birthdayListFile))
        {
            string json = r.ReadToEnd();
            items = JsonConvert.DeserializeObject<Dictionary<String, List<int>>>(json); // The json should be {"Person name":[month, day],}
        }

        foreach (String name in items.Keys)
        {
            DateTime date = new DateTime(today.Year, items[name][0], items[name][1]);
            if (date < today) { date = date.AddYears(1); }
            birthdays[name] = date;
        }

        return birthdays;
    }

    #endregion

    #region Announcements

    string expireJsonFile = "Data/announce_expire.json";
    private Dictionary<String, DateTime> loadSlides()
    {
        // read in the json file
        Dictionary<String, DateTime> items;
        using (StreamReader r = new StreamReader(expireJsonFile))
        {
            string json = r.ReadToEnd();
            items = JsonConvert.DeserializeObject<Dictionary<String, DateTime>>(json); // The json should be {"file_name":expiredate,}
        }
        return items;
    }

    List<String> announceFiles()
    {
        List<String> current_files = new List<string>();
        Dictionary<String, DateTime> all_files = loadSlides();
        foreach (string filename in all_files.Keys)
        {
            if (all_files[filename] > DateTime.Now)
            {
                current_files.Add(filename);
            }
        }
        return current_files;
    }

    #endregion
}
